#!/bin/bash -e

readonly UPDATE_FAILED_LOG="/data/update.failed"

if [ ! -f /data/need-update ]
then
    exit 0
fi

REBOOT_SYSTEM=0
TRUENAS_DB="/data/freenas-v1.db"
TRUENAS_DB_UPLOADED="/data/uploaded.db"
PWENC="/data/pwenc_secret"
PWENC_UPLOADED="/data/pwenc_secret_uploaded"
ROOT_KEYS="/root/.ssh/authorized_keys"
ROOT_KEYS_UPLOADED="/data/authorized_keys_uploaded"

# our api is gated on the fact that at minimum, a database
# file has to be uploaded so that's why all these other checks
# are inside this one "if" branch 
if [ -f ${TRUENAS_DB_UPLOADED} ]; then
    echo "Saving current ${TRUENAS_DB} to ${TRUENAS_DB}.bak"
    cp ${TRUENAS_DB} ${TRUENAS_DB}.bak

    echo "Moving ${TRUENAS_DB_UPLOADED} to ${TRUENAS_DB}"
    mv ${TRUENAS_DB_UPLOADED} ${TRUENAS_DB}

    if [ -f ${PWENC_UPLOADED} ]; then
        if [ -f ${PWENC} ]; then
            echo "Saving current ${PWENC} to ${PWENC}.bak"
            cp ${PWENC} ${PWENC}.bak
        fi
        echo "Moving ${PWENC_UPLOADED} to ${PWENC}"
        mv ${PWENC_UPLOADED} ${PWENC}
    fi

    if [ -f ${ROOT_KEYS_UPLOADED} ]; then
	if [ -f ${ROOT_KEYS} ]; then
	    echo "Saving current ${ROOT_KEYS} to ${ROOT_KEYS}.bak"
	    mv ${ROOT_KEYS} ${ROOT_KEYS}.bak
	fi
	echo "Moving ${ROOT_KEYS_UPLOADED} to ${ROOT_KEYS}"
	mv ${ROOT_KEYS_UPLOADED} ${ROOT_KEYS}
    fi
fi

migrate > $UPDATE_FAILED_LOG 2>&1

echo "REPLACE INTO system_keyvalue (key, value) VALUES ('run_migration', 'true')" | sqlite3 /data/freenas-v1.db

ret=0
truenas-initrd.py "/" > $UPDATE_FAILED_LOG 2>&1 || ret=$?
if [ $ret -eq 1 ]; then
	REBOOT_SYSTEM=1
fi

if [ $ret -le 1 ]; then
	rm -f $UPDATE_FAILED_LOG
fi

rm /data/need-update

if [ "${REBOOT_SYSTEM}" = "1" ]; then
	# We use force flag so that system does not actually perform a shutdown and instead reboots directly
	# We do not have middleware running at this point, so this should be good
	reboot -f;
fi
